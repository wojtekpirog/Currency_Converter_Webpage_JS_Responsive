{"version":3,"sources":["script.js"],"names":["amountInput","leftSelect","rightSelect","convertButton","errorMessage","result","URL","getCurrencies","amount","parseFloat","value","fromCurrency","toCurrency","setAttribute","textContent","convert","formatCurrency","fetch","concat","then","response","json","dataReady","data","Object","entries","rates","innerHTML","base","error","handleError","Math","round","toFixed","console","message","document","addEventListener","querySelector","forEach","currency"],"mappings":"AAAA,aAAA,IAAIA,EACAC,EAEAC,EACAC,EACAC,EACAC,EAEEC,EAAM,yCAqCZ,IAAMC,EAAgB,WACpB,IAAIC,EAASC,WAAWT,EAAYU,OAC9BC,EAAeV,EAAWS,MAC1BE,EAAaV,EAAYQ,MAE3BC,IAAiBC,GACnBR,EAAaS,aAAa,cAAe,SACzCT,EAAaU,YAAc,mCAClBN,GAAU,GACnBJ,EAAaS,aAAa,cAAe,SACzCT,EAAaU,YAAc,qDAE3BV,EAAaS,aAAa,cAAe,QACzCT,EAAaU,YAAc,GAC3BC,EAAQP,EAAQG,EAAcC,GAElC,EAEMG,EAAU,SAACP,EAAQG,EAAcC,GACrCJ,EAASQ,EAAeR,GAExBS,MAAK,6CAAAC,OAA8CV,EAAM,UAAAU,OAASP,EAAY,QAAAO,OAAON,IAClFO,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,GACL,IAAMC,EAAOC,OAAOC,QAAQH,EAAUI,OAAO,GAE7CrB,EAAOQ,aAAa,cAAe,SACnCR,EAAOsB,UAAS,GAAAT,OAAMV,EAAS,IAAMc,EAAUM,KAAI,OAAAV,OAAMF,EAAeO,EAAK,IAAM,IAAMA,EAAK,GAChG,IAAE,OACK,SAACM,GAAK,OAAKC,EAAYD,EAAM,GACxC,EAEMb,EAAiB,SAACR,GACtB,OAAQuB,KAAKC,MAAe,IAATxB,GAAgB,KAAKyB,QAAQ,EAClD,EAEMH,EAAc,SAACD,GACnBzB,EAAaS,aAAa,cAAe,SACzCT,EAAaU,YAAc,qFAC3BoB,QAAQL,MAAK,iDAAAX,OAAkDW,EAAMM,QAAO,KAC9E,EAEAC,SAASC,iBAAiB,oBA7E1B,WAOErC,EAAcoC,SAASE,cAAc,oBACrCrC,EAAamC,SAASE,cAAc,2BACvBF,SAASE,cAAc,0BACpCpC,EAAckC,SAASE,cAAc,yBACrCnC,EAAgBiC,SAASE,cAAc,6BACvClC,EAAegC,SAASE,cAAc,oBACtCjC,EAAS+B,SAASE,cAAc,qBAIhCnC,EAAckC,iBAAiB,QAAS9B,GAIxCU,MAAMX,GACHa,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,GACLE,OAAOC,QAAQH,GAAWiB,SAAQ,SAACC,GACjCvC,EAAW0B,WAAS,kBAAAT,OAAsBsB,EAAS,GAAE,MAAAtB,OAAKsB,EAAS,GAAE,MAAAtB,OAAKsB,EAAS,GAAE,cACrFtC,EAAYyB,WAAS,kBAAAT,OAAsBsB,EAAS,GAAE,MAAAtB,OAAKsB,EAAS,GAAE,MAAAtB,OAAKsB,EAAS,GAAE,aACxF,IAEAvC,EAAWS,MAAQ,MACnBR,EAAYQ,MAAQ,KACtB,IAAE,OACK,SAACmB,GAAK,OAAKC,EAAYD,EAAM,GA5BxC","file":"script.min.js","sourcesContent":["let amountInput;\r\nlet leftSelect;\r\nlet swapButton;\r\nlet rightSelect;\r\nlet convertButton;\r\nlet errorMessage;\r\nlet result;\r\n\r\nconst URL = \"https://api.frankfurter.app/currencies\";\r\n\r\nfunction main() {\r\n  getElements();\r\n  addListeners();\r\n  renderLists();\r\n};\r\n\r\nfunction getElements() {\r\n  amountInput = document.querySelector(\".app__body-input\");\r\n  leftSelect = document.querySelector(\".app__body-select--from\");\r\n  swapButton = document.querySelector(\".app__body-swap-button\");\r\n  rightSelect = document.querySelector(\".app__body-select--to\");\r\n  convertButton = document.querySelector(\".app__body-convert-button\");\r\n  errorMessage = document.querySelector(\".app__body-error\");\r\n  result = document.querySelector(\".app__body-result\");\r\n};\r\n\r\nfunction addListeners() {\r\n  convertButton.addEventListener(\"click\", getCurrencies);\r\n};\r\n\r\nfunction renderLists() {\r\n  fetch(URL)\r\n    .then((response) => response.json())\r\n    .then((dataReady) => {\r\n      Object.entries(dataReady).forEach((currency) => {\r\n        leftSelect.innerHTML += `<option value=\"${currency[0]}\">${currency[1]} (${currency[0]})</option>`;\r\n        rightSelect.innerHTML += `<option value=\"${currency[0]}\">${currency[1]} (${currency[0]})</option>`;\r\n      });\r\n\r\n      leftSelect.value = \"USD\";\r\n      rightSelect.value = \"EUR\";\r\n    })\r\n    .catch((error) => handleError(error));\r\n}\r\n\r\nconst getCurrencies = () => {\r\n  let amount = parseFloat(amountInput.value);\r\n  const fromCurrency = leftSelect.value;\r\n  const toCurrency = rightSelect.value;\r\n\r\n  if (fromCurrency === toCurrency) {\r\n    errorMessage.setAttribute(\"aria-hidden\", \"false\");\r\n    errorMessage.textContent = \"Currencies should be different.\";\r\n  } else if (amount <= 0) {\r\n    errorMessage.setAttribute(\"aria-hidden\", \"false\");\r\n    errorMessage.textContent = \"The value specified should be greater than zero.\";\r\n  } else {\r\n    errorMessage.setAttribute(\"aria-hidden\", \"true\");\r\n    errorMessage.textContent = \"\";\r\n    convert(amount, fromCurrency, toCurrency);\r\n  }\r\n}\r\n\r\nconst convert = (amount, fromCurrency, toCurrency) => {\r\n  amount = formatCurrency(amount); // Ensure that the amount is formatted correctly\r\n\r\n  fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${fromCurrency}&to=${toCurrency}`)\r\n    .then((response) => response.json())\r\n    .then((dataReady) => {\r\n      const data = Object.entries(dataReady.rates)[0];\r\n\r\n      result.setAttribute(\"aria-hidden\", \"false\");\r\n      result.innerHTML = `${amount + \" \" + dataReady.base} = ${formatCurrency(data[1]) + \" \" + data[0]}`;\r\n    })\r\n    .catch((error) => handleError(error));\r\n}\r\n\r\nconst formatCurrency = (amount) => {\r\n  return (Math.round(amount * 100) / 100).toFixed(2);\r\n}\r\n\r\nconst handleError = (error) => {\r\n  errorMessage.setAttribute(\"aria-hidden\", \"false\");\r\n  errorMessage.textContent = \"We're sorry, an error has occured while fetching the data. Please try again later.\";\r\n  console.error(`An error has occured while fetching the data: ${error.message}.`);\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", main);"]}